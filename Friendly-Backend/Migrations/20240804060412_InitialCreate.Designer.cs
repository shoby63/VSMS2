// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(PrimeAutomobilesDbContext))]
    [Migration("20240804060412_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.models.BillOfMaterial", b =>
                {
                    b.Property<int>("BillOfMaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillOfMaterialID"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ServiceRecordID")
                        .HasColumnType("int");

                    b.Property<int>("WorkItemID")
                        .HasColumnType("int");

                    b.HasKey("BillOfMaterialID");

                    b.HasIndex("ServiceRecordID");

                    b.HasIndex("WorkItemID");

                    b.ToTable("BillOfMaterials");
                });

            modelBuilder.Entity("api.models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("api.models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceRecordID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ServiceRecordID")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("api.models.ServiceRecord", b =>
                {
                    b.Property<int>("ServiceRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRecordId"));

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceRepresentativeID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("ServiceRecordId");

                    b.HasIndex("ServiceRepresentativeID");

                    b.HasIndex("VehicleID");

                    b.ToTable("ServiceRecords");
                });

            modelBuilder.Entity("api.models.ServiceRepresentative", b =>
                {
                    b.Property<int>("ServiceRepresentativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRepresentativeId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceRepresentativeId");

                    b.ToTable("ServiceRepresentatives");
                });

            modelBuilder.Entity("api.models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("CustomerID");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("api.models.WorkItem", b =>
                {
                    b.Property<int>("WorkItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkItemId"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkItemId");

                    b.ToTable("WorkItems");
                });

            modelBuilder.Entity("api.models.BillOfMaterial", b =>
                {
                    b.HasOne("api.models.ServiceRecord", "ServiceRecord")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("ServiceRecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.models.WorkItem", "WorkItem")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("WorkItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceRecord");

                    b.Navigation("WorkItem");
                });

            modelBuilder.Entity("api.models.Invoice", b =>
                {
                    b.HasOne("api.models.ServiceRecord", "ServiceRecord")
                        .WithOne("Invoice")
                        .HasForeignKey("api.models.Invoice", "ServiceRecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceRecord");
                });

            modelBuilder.Entity("api.models.ServiceRecord", b =>
                {
                    b.HasOne("api.models.ServiceRepresentative", "ServiceRepresentative")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("ServiceRepresentativeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.models.Vehicle", "Vehicle")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceRepresentative");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("api.models.Vehicle", b =>
                {
                    b.HasOne("api.models.Customer", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("api.models.Customer", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("api.models.ServiceRecord", b =>
                {
                    b.Navigation("BillOfMaterials");

                    b.Navigation("Invoice")
                        .IsRequired();
                });

            modelBuilder.Entity("api.models.ServiceRepresentative", b =>
                {
                    b.Navigation("ServiceRecords");
                });

            modelBuilder.Entity("api.models.Vehicle", b =>
                {
                    b.Navigation("ServiceRecords");
                });

            modelBuilder.Entity("api.models.WorkItem", b =>
                {
                    b.Navigation("BillOfMaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
